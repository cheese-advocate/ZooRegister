/*
 * Author:              Tristan Ackermann (FK6W29M15)
 * Date:                2017-08-10
 * NetBeans Version:    7.3.1
 * Java Version:        1.8.0_141-b15
 * File Description:    Administrator Client GUI for Zoo Register project.
 */

/* regex needs fixing
 * server will be the only one to verify whether records exist
 */
package zooregisterclient;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FK6W29M15
 */
class ZRCAdmin extends javax.swing.JFrame {
    
    //<editor-fold defaultstate="collapsed" desc="Class Variable Declarations">
    
    static final String SERVER_COMMUNICATION_ERROR = "Could not properly communicate with server";
    
    /** Returned or thrown when a server-side error occurs */
    static final String SERVER_ERROR = "Error";
    
    private ArrayList packetFromServer = new ArrayList();
    private ArrayList packetToServer = new ArrayList();
    private int port = 15328;
    private String errors;
    private String serverIP = "127.0.0.1";
    private String speciesErrors;
    
    /**
     * The possible interactions the administrator client can make with the server
     */
    private enum Interactions {
        DELETE, INSERT, SEARCH
    }
    
    /**
     * The tables existing in the Zoo Register Database
     */
    private enum Table {
        ANIMAL, SPECIES, USER
    }
    
        //<editor-fold defaultstate="collapsed" desc="Regular Expression Compilation">
    
        /**
         * Valid Animal Descriptions:
         * <p>
         * - Up to 250 Characters long.
         * - Word characters only (a-zA-z_0-9).
         */
        private Pattern validAnimalDescriptions = Pattern.compile("\\w{0,250}");

        /**
         * Valid Animal names:
         * <p>
         * - Up to 250 characters long. (Shortest and longest animal names)
         * - Word characters only.
         */
        private Pattern validAnimalNames = Pattern.compile("[[A-Z][a-z][\\s[a-z]*] && \\w{2,43}]");

        /**
         * Valid Passwords:
         * <p>
         * - 8 to 30 Characters long.
         * - Word characters only (a-zA-z_0-9)
         * <p>
         * Pre-existence is determined by the database, not the expression.
         */
        private Pattern validPasswords = Pattern.compile("\\w{6,25}");

        /**
         * Valid Species names:
         * <p>
         * - 2 to 43 characters long. (Shortest and longest species names)
         * - Words contain letters only.
         * - Start with a capital letter.
         * - One or more whole words.
         * - Words separated by single spaces.
         */
        private Pattern validSpeciesNames = Pattern.compile("[[A-Z][a-z][\\s[a-z]*?] && \\w{5,43}]");

        /**
         * Valid Usernames:
         * <p>
         * - 6 to 25 Characters long.
         * - Word characters only (a-zA-z_0-9)
         * <p>
         * Pre-existence is determined by the database, not the expression.
         */
        private Pattern validUsernames = Pattern.compile("\\w{6,25}");
        
        //</editor-fold>
        
    //</editor-fold>
    
    
    
    /**
     * Creates new form ZRCAdmin
     */
    ZRCAdmin() {
        
        /* Set this window's title */
        super("ZR C Admin");
        
        /* Return to standard Client frame when closed */
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        /* Initialise this client's GUI components */
        initComponents();
        
        /* Centre the GUI in the screen */
        setLocationRelativeTo(null);
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpnTables = new javax.swing.JTabbedPane();
        pnlAnimal = new javax.swing.JPanel();
        lblAnimalName = new javax.swing.JLabel();
        lblAnimalDesc = new javax.swing.JLabel();
        lblSpecies = new javax.swing.JLabel();
        txfAnimalName = new javax.swing.JTextField();
        txfSpecies = new javax.swing.JTextField();
        scpAnimalDesc = new javax.swing.JScrollPane();
        txaAnimalDesc = new javax.swing.JTextArea();
        btnInsertAnimal = new javax.swing.JButton();
        btnDeleteAnimal = new javax.swing.JButton();
        scpAnimalTable = new javax.swing.JScrollPane();
        tblAnimal = new javax.swing.JTable();
        pnlSpecies = new javax.swing.JPanel();
        lblSpeciesName = new javax.swing.JLabel();
        txfSpeciesName = new javax.swing.JTextField();
        btnInsertSpecies = new javax.swing.JButton();
        scpSpeciesTable = new javax.swing.JScrollPane();
        tblSpecies = new javax.swing.JTable();
        pnlUser = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblConfirmPW = new javax.swing.JLabel();
        btnInsertUser = new javax.swing.JButton();
        txfUsername = new javax.swing.JTextField();
        pwfPassword = new javax.swing.JPasswordField();
        pwfConfirmPW = new javax.swing.JPasswordField();
        lblPWMatch = new javax.swing.JLabel();
        scpUserTable = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        btnDeleteUser = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        mbMenu = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miBack = new javax.swing.JMenuItem();
        mbHelp = new javax.swing.JMenu();
        miHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tpnTables.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tpnTablesStateChanged(evt);
            }
        });

        lblAnimalName.setText("Animal Name:");

        lblAnimalDesc.setText("Animal Description:");

        lblSpecies.setText("Species:");

        txaAnimalDesc.setColumns(20);
        txaAnimalDesc.setRows(5);
        scpAnimalDesc.setViewportView(txaAnimalDesc);

        btnInsertAnimal.setText("Insert");
        btnInsertAnimal.setToolTipText("Inserts a new animal into the database with the given information.");
        btnInsertAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertAnimalActionPerformed(evt);
            }
        });

        btnDeleteAnimal.setText("Delete");
        btnDeleteAnimal.setToolTipText("Deletes the selected user from the database.");
        btnDeleteAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAnimalActionPerformed(evt);
            }
        });

        tblAnimal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Animal Name", "Description", "Species"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAnimal.setColumnSelectionAllowed(true);
        scpAnimalTable.setViewportView(tblAnimal);
        tblAnimal.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout pnlAnimalLayout = new javax.swing.GroupLayout(pnlAnimal);
        pnlAnimal.setLayout(pnlAnimalLayout);
        pnlAnimalLayout.setHorizontalGroup(
            pnlAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnimalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAnimalDesc)
                    .addComponent(lblSpecies)
                    .addComponent(lblAnimalName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAnimalLayout.createSequentialGroup()
                        .addComponent(btnInsertAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteAnimal))
                    .addComponent(txfAnimalName)
                    .addComponent(txfSpecies)
                    .addComponent(scpAnimalDesc))
                .addContainerGap())
            .addComponent(scpAnimalTable, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );
        pnlAnimalLayout.setVerticalGroup(
            pnlAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnimalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAnimalName)
                    .addComponent(txfAnimalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSpecies)
                    .addComponent(txfSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAnimalDesc)
                    .addComponent(scpAnimalDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnInsertAnimal)
                    .addComponent(btnDeleteAnimal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpAnimalTable, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
        );

        tpnTables.addTab("ANIMAL", pnlAnimal);

        lblSpeciesName.setText("Species Name:");

        btnInsertSpecies.setText("Insert");
        btnInsertSpecies.setToolTipText("Inserts a new species into the database with the given species name.");
        btnInsertSpecies.setMaximumSize(new java.awt.Dimension(77, 23));
        btnInsertSpecies.setMinimumSize(new java.awt.Dimension(77, 23));
        btnInsertSpecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertSpeciesActionPerformed(evt);
            }
        });

        tblSpecies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Species Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSpecies.setColumnSelectionAllowed(true);
        scpSpeciesTable.setViewportView(tblSpecies);
        tblSpecies.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout pnlSpeciesLayout = new javax.swing.GroupLayout(pnlSpecies);
        pnlSpecies.setLayout(pnlSpeciesLayout);
        pnlSpeciesLayout.setHorizontalGroup(
            pnlSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSpeciesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSpeciesName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSpeciesLayout.createSequentialGroup()
                        .addComponent(btnInsertSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txfSpeciesName))
                .addContainerGap())
            .addComponent(scpSpeciesTable, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );
        pnlSpeciesLayout.setVerticalGroup(
            pnlSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSpeciesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSpeciesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSpeciesName)
                    .addComponent(txfSpeciesName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnInsertSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpSpeciesTable, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE))
        );

        tpnTables.addTab("SPECIES", pnlSpecies);

        lblUsername.setText("Username:");

        lblPassword.setText("Password:");

        lblConfirmPW.setText("Confirm Password:");

        btnInsertUser.setText("Add User");
        btnInsertUser.setToolTipText("Adds a new user to the database with the given information.");
        btnInsertUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertUserActionPerformed(evt);
            }
        });

        tblUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "User"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUser.setColumnSelectionAllowed(true);
        scpUserTable.setViewportView(tblUser);
        tblUser.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btnDeleteUser.setText("Delete User");
        btnDeleteUser.setToolTipText("Deletes the selected user from the database.");
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlUserLayout = new javax.swing.GroupLayout(pnlUser);
        pnlUser.setLayout(pnlUserLayout);
        pnlUserLayout.setHorizontalGroup(
            pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblConfirmPW)
                    .addComponent(lblPassword)
                    .addComponent(lblUsername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pwfPassword)
                    .addComponent(pwfConfirmPW)
                    .addGroup(pnlUserLayout.createSequentialGroup()
                        .addComponent(btnInsertUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPWMatch, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                        .addGap(8, 8, 8)
                        .addComponent(btnDeleteUser))
                    .addComponent(txfUsername))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(scpUserTable, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );
        pnlUserLayout.setVerticalGroup(
            pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(pwfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConfirmPW)
                    .addComponent(pwfConfirmPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPWMatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInsertUser)
                    .addGroup(pnlUserLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDeleteUser)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpUserTable, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tpnTables.addTab("USER", pnlUser);

        btnBack.setText("Back");
        btnBack.setToolTipText("Logs you out and returns to the standard user interface.");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        mFile.setText("File");

        miBack.setText("Back to Regular Client");
        miBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBackActionPerformed(evt);
            }
        });
        mFile.add(miBack);

        mbMenu.add(mFile);

        mbHelp.setText("Help");

        miHelp.setText("Help");
        miHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHelpActionPerformed(evt);
            }
        });
        mbHelp.add(miHelp);

        mbMenu.add(mbHelp);

        setJMenuBar(mbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpnTables)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tpnTables)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    /**
     * Validates user input before attempting to add the user to the Zoo
     * Register Database.
     * 
     * @param evt The event fired from this button being pressed.
     */
    private void btnInsertUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertUserActionPerformed
        
        /* Store the user input */
        String username = txfUsername.getText();
        String password = pwfPassword.getText();
        String confirmPW = pwfConfirmPW.getText();
        
        /* Client-side and server-side input validation */
        /* Username must not contain any non-word characters */
        Matcher validPattern = validUsernames.matcher(username);
        boolean wordCharsOnly = validPattern.matches();
        
        /* passwords must match */
        boolean passwordsMatch = (password.equals(confirmPW));
        
        if (wordCharsOnly && passwordsMatch) {
            
            /* Add the given new user credentials to the database */
            String[] recordValues = {username, password, confirmPW};
            
            try {
                
                insertRecord(Table.USER, recordValues);
                JOptionPane.showMessageDialog(this, "Successfully added the new user.", "Success!", JOptionPane.INFORMATION_MESSAGE);
                
            } catch (Exception e) {
                
                JOptionPane.showMessageDialog(
                        this, e.getMessage(), "Error",
                        JOptionPane.WARNING_MESSAGE);
                
            }
            
        } else {
            
            errors = "";
            
            /* Collect all errors that occurred */
            if (username.isEmpty()) {
                
                errors += "\n\nPlease provide a username.";
                
            } else if (!wordCharsOnly) {
                
                errors += "\n\nUsernames cannot contain any non-word characters.";
                
            }
            
            if (password.isEmpty()) {
                
                errors += "\n\nA password is required.";
                
            } else if (confirmPW.isEmpty()) {
                
                errors += "\n\nPlease confirm your password.";
                
            } else if (!passwordsMatch) {
                
                errors += "\n\nThe entered passwords do not match.";
                
            }
            
            /* Remove the first "\n\n" from errors */
            errors = errors.substring(2, errors.length());
            
            /* Notify the user of all found errors */
            JOptionPane.showMessageDialog(
                    this, errors,"Unable to Add User",
                    JOptionPane.WARNING_MESSAGE);
            
        }
        
    }//GEN-LAST:event_btnInsertUserActionPerformed
    
    
    
    /**
     * Validates user input before attempting to add the species to the Zoo
     * Register Database.
     * 
     * @param evt The event fired from this button being pressed.
     */
    private void btnInsertSpeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertSpeciesActionPerformed
        
        /* Store the user input */
        String speciesName = txfSpeciesName.getText();
        
        /* Adding new species can also be done by adding a new animal from an
         * unrecorded species.
         */
        /* Client-side and Server-side validation */
        /* Species name must be valid (See Regular expression validSpeciesNames) */
        Matcher validPattern = validSpeciesNames.matcher(speciesName);
        boolean validSpeciesName = validPattern.matches();
        System.out.println("Valid Species Name: " + validSpeciesName);
        
        if (validSpeciesName && !speciesName.isEmpty()) {
            
            /* Add the given new species to the database */
            String[] recordValues = {speciesName};
            
            try {
                
                insertRecord(Table.SPECIES, recordValues);
                JOptionPane.showMessageDialog(this, "Successfully added the new species.", "Success!", JOptionPane.INFORMATION_MESSAGE);
                
            } catch (Exception e) {
                
                JOptionPane.showMessageDialog(
                        this, e.getMessage(), "Unable to add Species",
                        JOptionPane.WARNING_MESSAGE);
                
            }
            
            
            
        } else {
            
            speciesErrors = "";
            
            /* Collect all errors that occured */
            if (speciesName.isEmpty()) {
                
                speciesErrors += "\n\nPlease provide a species name.";
                
            } else if (!validSpeciesName) {
                
                speciesErrors += "\n\nThat species name is not valid."
                        + "\n\nValid species names:"
                          + "\n+ 6 - 25 Characters long"
                          + "\n+ Word characters only (a-zA-z_0-9)";
                
            }
            
        }
        
        /* Remove the first "\n\n" from errors */
        speciesErrors = speciesErrors.substring(2, speciesErrors.length());
        JOptionPane.showMessageDialog(
                this, speciesErrors, "Unable to Add Species",
                JOptionPane.WARNING_MESSAGE);
        
    }//GEN-LAST:event_btnInsertSpeciesActionPerformed
    
    
    
    /**
     * Validates user input before attempting to add the animal to the Zoo
     * Register Database.
     * 
     * @param evt The event fired from this button being pressed.
     */
    private void btnInsertAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertAnimalActionPerformed
        
        /* Store the client input */
        String animalName = txfAnimalName.getText();
        String species = txfSpecies.getText();
        String animalDescription = txaAnimalDesc.getText();
        
        /* Client-side and Server-side validation */
        /* Animal name must be valid */
        Matcher validPattern = validAnimalNames.matcher(animalName);
        boolean validAnimalName = validPattern.matches();
        
        /* Animal Description must be valid */
        Matcher validPattern2 = validAnimalDescriptions.matcher(animalDescription);
        boolean validAnimalDesc = validPattern2.matches();
        
        if (validAnimalName && validAnimalDesc && !(animalName.isEmpty() || species.isEmpty())) {
            
            /* Add the given new species to the database */
            String[] recordValues = {animalName, animalDescription, species};
            
            try {
              
                insertRecord(Table.ANIMAL, recordValues);
                JOptionPane.showMessageDialog(this, "Successfully inserted the new animal.", "Success!", JOptionPane.INFORMATION_MESSAGE);
                
            } catch (Exception e) {
                
                JOptionPane.showMessageDialog(this, "Failed to insert new animal.\n\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                
            }
            
        } else {
            
            errors = "";
            
            /* Collect all errors that occured */
            if (animalName.isEmpty()) {
                
                errors += "\n\nPlease provide an animal name.";
                
            } else if (!validAnimalName) {
                
                errors += "\n\nThis animal name is not valid."
                        + "\n\nValid animal names:"
                          + "\n+ 2 to 43 characters long."
                          + "\n+ Words contain letters only."
                          + "\n+ Start the first word with with a capital letter."
                          + "\n+ One or more whole words are allowed."
                          + "\n+ Words must be separated by single spaces.";
                
            }
            
            if (!validAnimalDesc) {
                
                errors += "\n\nThis animal's description is not valid."
                        + "\n\nValid animal descriptions:"
                          + "\n+ Up to 250 Characters long"
                          + "\n+ Word characters only (a-zA-z_0-9)";
                
            }
            
            /* Remove the first "\n\n" from errors */
            errors = errors.substring(2, errors.length());
            JOptionPane.showMessageDialog(this, errors + speciesErrors, "Unable to Add Animal", JOptionPane.WARNING_MESSAGE);
            
        }
        
    }//GEN-LAST:event_btnInsertAnimalActionPerformed
    
    
    
    /**
     * Disposes of the administrator window to bring the user back the the
     * regular client GUI.
     * 
     * @param evt The event fired from this button being pressed.
     */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        
        /* Dispose of the admin GUI to return to the regular client GUI */
        dispose();
        
    }//GEN-LAST:event_btnBackActionPerformed
    
    
    
    /**
     * Gets the selected animal's ID before deleting it from the database.
     * 
     * @param evt The event fired from this button being pressed.
     */
    private void btnDeleteAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAnimalActionPerformed
        
        try {
            
            /* Pass the selected table to deleteRecord() for modular deletion. */
            deleteRecord(tblAnimal);
            JOptionPane.showMessageDialog(
                    this, "Successfully deleted the selected animal.",
                    "Success!", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (Exception e) {
            
            JOptionPane.showMessageDialog(
                    this, e.getMessage() + ".", "Error", JOptionPane.ERROR_MESSAGE);
            
        }
        
    }//GEN-LAST:event_btnDeleteAnimalActionPerformed
    
    
    
    /**
     * Gets the selected user's ID before deleting it from the database.
     * 
     * @param evt The event fired from this button being pressed.
     */
    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        
        try {
            
            /* Pass the selected table to deleteRecord() for modular deletion. */
            deleteRecord(tblUser);
            JOptionPane.showMessageDialog(
                    this, "Successfully deleted the selected user.",
                    "Success!", JOptionPane.ERROR_MESSAGE);
            
        } catch (Exception e) {
            
            JOptionPane.showMessageDialog(
                    this, e.getMessage() + ".", "Error", JOptionPane.ERROR_MESSAGE);
            
        }
        
        
        
        
    }//GEN-LAST:event_btnDeleteUserActionPerformed

    
    
    /**
     * When the user changes tabs, refresh the table in the tab the user has transitioned to.
     * 
     * @param evt 
     */
    private void tpnTablesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tpnTablesStateChanged
        
        int tab = tpnTables.getSelectedIndex();
        if (!packetToServer.isEmpty()) {
            packetToServer.clear();
        }
        packetToServer.add(Interactions.SEARCH);
        
        try {
            
            switch (tab) {
                
                case 0: /* Animal Tab */

                    /* Refresh the Animal Table */
                    packetToServer.add(Table.ANIMAL);

                    /* Communicate with the server */
                    packetFromServer = ServerInteractions.getServerResponse(serverIP, port, packetToServer);

                    /* Populate the Animal Table with results */
                    tblSpecies.setModel(populateTable((ResultSet)packetFromServer.get(0)));

                    /* Do not follow through to following cases */
                    break;

                case 1: /* Species Tab */

                    /* Refresh the Species Table */
                    packetToServer.add(Table.SPECIES);

                    /* Communicate with the server */
                    packetFromServer = ServerInteractions.getServerResponse(serverIP, port, packetToServer);

                    /* Populate the Species Table with results */
                    tblSpecies.setModel(populateTable((ResultSet)packetFromServer.get(0)));

                    /* Do not follow through to following cases */
                    break;

                case 2: /* User Tab */

                    /* Refresh the User Table */
                    if (!packetToServer.isEmpty()) {
                    packetToServer.add(Table.USER);

                    /* Communicate with the server */
                    packetFromServer = ServerInteractions.getServerResponse(serverIP, port, packetToServer);

                    /* Populate the User Table with results */
                    tblUser.setModel(populateTable((ResultSet)packetFromServer.get(0)));

                }

            }
            
        } catch (ServerCommunicationException | SQLException e) {
            
            JOptionPane.showMessageDialog(
                this, "Failed to populate table.\n\n" + SERVER_COMMUNICATION_ERROR + ".",
                "Error", JOptionPane.ERROR_MESSAGE);
            
        }
        
    }//GEN-LAST:event_tpnTablesStateChanged
    
    
    
    /**
     * Designs and displays the administrator help menu.
     * 
     * @param evt 
     */
    private void miHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHelpActionPerformed
        
        /* Design the help dialog */
        JTabbedPane tabs = new JTabbedPane();
        JPanel general = new JPanel();
        JPanel validValues = new JPanel();
        JTextArea generalHelp = new JTextArea();
        JTextArea validValuesHelp = new JTextArea();
        
        generalHelp.setText(
                "Use the tabs near the top to select which table you "
              + "wish to interact with. Inside each tab you may view\n"
              + "the table's records, select and delete records, or "
              + "insert new records after entering the new record's\n"
              + "data in the provided text fields."
              + "\n\n"
              + "You can close the frame or click on the \"Exit\" "
              + "button at any time to close the administrator menu\n"
              + "and return to the regular menu.");
        
        
        validValuesHelp.setText(
                "ANIMALS\n\n"
              + "Animal name: 2-43 word characters long, the first word begins"
              + "with a capitalised letter, one or more whole words separated "
              + "by single spaces.\n\n"
              + "Animal description: Up to 250 word characters long.\n\n\n"
              + "SPECIES\n\n"
              + "Species name: 5 to 43 word characters long.\n\n\n"
              + "USERS\n\n"
              + "Username: 6 to 25 word characters long.\n"
              + "Password: 8 to 30 word characters long.\n"
              + "Confirm Password: Match Password.");
        
        generalHelp.setLineWrap(true);
        generalHelp.setSize(600,600);
        generalHelp.setWrapStyleWord(true);
        
        validValuesHelp.setLineWrap(true);
        validValuesHelp.setSize(600,600);
        validValuesHelp.setWrapStyleWord(true);
        
        general.add(generalHelp);
        validValues.add(validValuesHelp);
        
        tabs.add(general);
        tabs.add(validValues);
        
        tabs.setTitleAt(0, "General");
        tabs.setTitleAt(1, "Valid Input");
        
        /* Show the help dialog */
        JOptionPane.showMessageDialog(this, tabs, "Help", JOptionPane.PLAIN_MESSAGE);
        
    }//GEN-LAST:event_miHelpActionPerformed
    
    
    
    /**
     * Calls btnBack's event handler since both events are identical in handling.
     * 
     * @param evt 
     */
    private void miBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBackActionPerformed
        
        /* Call btnBack's event handler since both events are identical in handling. */
        btnBack.doClick();
        
    }//GEN-LAST:event_miBackActionPerformed
    
    
    
    /**
     * Configures the administrator GUI to conform its IP and port to that of
     * the regular client.
     * 
     * @param serverIP The regular client's serverIP.
     * @param port The regular client's port number.
     */
    void setNetConfig(String serverIP, int port) {
        
        /* Inherit the regular client's serverIP and port */
        this.serverIP = serverIP;
        this.port = port;
        System.out.println("\nArgs\n\nIP: " + serverIP + "\nPort: " + port + "\n");
        
    }
    
    
    
    /**
     * Remodel the given table in order to populate it so it can show its data.
     * 
     * @param table The table to refresh
     * @param resultSet The resultSet to populate data from into the table.
     * @return The new, populated DefaultTableModel
     * @throws SQLException If an exception occurred during the new DefaultTableModel's processing.
     */
    private DefaultTableModel populateTable(ResultSet resultSet) throws SQLException {
        
        /* Rebuild the table */
        DefaultTableModel populatedTable = new DefaultTableModel();
        
        try {
            
            /* Get the number of columns in the table */
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            
            /* Add the columns to the updated table model */
            for (int i = 1; i <= columnCount; i++){
                populatedTable.addColumn(metaData.getColumnLabel(i));
            }
            
            /* Populate the updated table */
            String[] rows = new String[columnCount];
            while (resultSet.next()) {

                for (int i = 0; i < columnCount; i++){
                    rows[i] = resultSet.getString(i+1);
                }

                populatedTable.addRow(rows);

            }
            
            return populatedTable;
            
        } catch (SQLException sqle) {
            
            throw new SQLException("Unable to update table. Possibly invalid ResultSet.");
            
        }
        
    }
    
    
    
    /**
     * Attempts to delete the given record from the Zoo Register database's
     * client-specified table via the server.
     * 
     * @param table The table from which to delete the record
     * @param id The number from the record's identifying element column
     * @return The server's reported results of the database record delete attempt
     */
    private void deleteRecord(JTable jTable) throws Exception {
        
        /* Client-side work is done on the jTable, server communicatin is done
         * with enum Table
         */
        Table table;
        
        /* Synchronise the enum Table with the jTable */
        switch (jTable.getName()) {
            case "tblAnimal":
                
                table = Table.ANIMAL;
                
                /* Do not follow through to following cases */
                break;
                
            case "tblSpecies":
                
                table = Table.SPECIES;
                
                /* Do not follow through to following cases */
                break;
                
            case "tblUser":
                
                table = Table.USER;
                
                /* Do not follow through to following cases */
                break;
                
            default:
                
                throw new Exception("Invalid table selected.");
                
        }
        
        /* Find out which row is selected */
        int selectedRow = jTable.getSelectedRow();
        
        if (selectedRow == -1) {
            
            /* If no row is selected, prompt the user to select one first. */
            throw new Exception("No Record Selected");
            
        }
        
        /* Store the values for the record's fields which are contained in the selected row */
        int numColumns = jTable.getColumnCount();
        
        String[] recordValues = new String[numColumns];
        
        for (int i = 0; i < numColumns; i++) {
            recordValues[i] = (String)jTable.getValueAt(selectedRow, i);
        }
        
        /* Prepare the input for the server */
        if (!packetToServer.isEmpty()) {
            packetToServer.clear();
        }
        packetToServer.add(Interactions.DELETE);
        packetToServer.add(table);
        packetToServer.add(recordValues);
        
        try {
                    
            /* Communicate with the server */
            packetFromServer = ServerInteractions.getServerResponse(serverIP, port, packetToServer);
            
            String deleteResults = (String)packetFromServer.get(0);
            
            if (deleteResults.equals(SERVER_ERROR)) {
                
                /* Report the error as server-sided */
                throw new Exception((String)packetFromServer.get(1));
                
            }
            
            /* If no exception was thrown, the delete was a success */
            JOptionPane.showMessageDialog(this, "Successfully deleted record.", "Success!", JOptionPane.INFORMATION_MESSAGE);

        } catch (ServerCommunicationException e) {
            
            throw new Exception(SERVER_COMMUNICATION_ERROR);

        }
        
    }
    
    
    
    /**
     * Attempts to insert the given record into the Zoo Register database's
     * client-specified table via the server.
     * 
     * @param table The table into which the record will be inserted
     * @param recordValues The array of fields that make up the record to be inserted
     * @return The server's reported results of the database record insert attempt
     */
    private void insertRecord(Table table, String[] recordValues) throws Exception {
        
        /* Prepare the input for the server */
        if (!packetToServer.isEmpty()) {
            packetToServer.clear();
        }
        packetToServer.add(Interactions.INSERT);
        packetToServer.add(table);
        packetToServer.add(recordValues);
        
        try {
                    
            /* Communicate with the server */
            packetFromServer = ServerInteractions.getServerResponse(serverIP, port, packetToServer);
            
            String insertResults = (String)packetFromServer.get(0);
            
            if (insertResults.equals(SERVER_ERROR)) {
                
                /* Report the error as server-sided, or that input was not
                 * valid
                 */
                throw new Exception((String)packetFromServer.get(1));
                
            }
            
            /* If no exception was thrown, the insert was a success */
            JOptionPane.showMessageDialog(this, "Successfully inserted record.", "Success!", JOptionPane.INFORMATION_MESSAGE);

        } catch (ServerCommunicationException e) {
            
            throw new Exception(SERVER_COMMUNICATION_ERROR);

        }
        
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZRCAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ZRCAdmin().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteAnimal;
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnInsertAnimal;
    private javax.swing.JButton btnInsertSpecies;
    private javax.swing.JButton btnInsertUser;
    private javax.swing.JLabel lblAnimalDesc;
    private javax.swing.JLabel lblAnimalName;
    private javax.swing.JLabel lblConfirmPW;
    private javax.swing.JLabel lblPWMatch;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblSpecies;
    private javax.swing.JLabel lblSpeciesName;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenu mbHelp;
    private javax.swing.JMenuBar mbMenu;
    private javax.swing.JMenuItem miBack;
    private javax.swing.JMenuItem miHelp;
    private javax.swing.JPanel pnlAnimal;
    private javax.swing.JPanel pnlSpecies;
    private javax.swing.JPanel pnlUser;
    private javax.swing.JPasswordField pwfConfirmPW;
    private javax.swing.JPasswordField pwfPassword;
    private javax.swing.JScrollPane scpAnimalDesc;
    private javax.swing.JScrollPane scpAnimalTable;
    private javax.swing.JScrollPane scpSpeciesTable;
    private javax.swing.JScrollPane scpUserTable;
    private javax.swing.JTable tblAnimal;
    private javax.swing.JTable tblSpecies;
    private javax.swing.JTable tblUser;
    private javax.swing.JTabbedPane tpnTables;
    private javax.swing.JTextArea txaAnimalDesc;
    private javax.swing.JTextField txfAnimalName;
    private javax.swing.JTextField txfSpecies;
    private javax.swing.JTextField txfSpeciesName;
    private javax.swing.JTextField txfUsername;
    // End of variables declaration//GEN-END:variables
}
