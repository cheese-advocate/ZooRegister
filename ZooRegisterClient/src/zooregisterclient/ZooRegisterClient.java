/*
 * Author:              Tristan Ackermann (FK6W29M15)
 * Date:                2017-08-10
 * NetBeans Version:    7.3.1
 * Java Version:        1.8.0_141-b15
 * File Description:    Regular client program for the Zoo Register Project.
 */

/*
 * NOTE: WHEREVER "Administrator permission required." IS STATED, A POPUP
 * REQUESTING ADMINISTRATOR CREDENTIALS IS SHOWN TO THE USER.
 */

/* documentation (.docx, DOLE, commenting)
 * javadoc on EVERY variable???
 * create custom exception
 * variables and methods named according to javabeans standards
 * fix regex (the patterns never seem to match)
 */
package zooregisterclient;

import java.awt.Color;
import java.awt.Frame;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author FK6W29M15
 */
class ZooRegisterClient extends javax.swing.JFrame {
    
    //<editor-fold defaultstate="collapsed" desc="Class Variable Declaration">
    
    /** When the client receives a response it was not expecting, including no
     * response
     */
    private final String INVALID_SERVER_RESPONSE = "Invalid server response";
    
    /** When this client is unable to properly communicate with the server */
    private final String SERVER_COMMUNICATION_ERROR = "Could not establish communication with the server";
    
    /** When the server returns that an error occurred */
    private final String SERVER_ERROR = "A server-side error occurred";
    
    private ArrayList packetToServer = new ArrayList();
    private ArrayList packetFromServer = new ArrayList();
    private int port = 15328;
    private ServerInteractions.SearchCategory searchCategory = ServerInteractions.SearchCategory.ANIMALS;
    private String serverIP = "127.0.0.1";
    private String serverResults;
    
    //</editor-fold>
    
    
    
    /**
     * Creates new form ZooRegisterClient
     */
    public ZooRegisterClient() {
        
        /* Set this window's title */
        super("Zoo Register Client");
        
        /* Allow for prompting window close confirmation */
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        
        /* Initialise this client's GUI components */
        initComponents();
        
        /* Centre the interface location */
        setLocationRelativeTo(null);
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbSearchCategory = new javax.swing.JComboBox();
        txfSearch = new javax.swing.JTextField();
        lblSearchFor = new javax.swing.JLabel();
        scpTableScroll = new javax.swing.JScrollPane();
        tblSearchResults = new javax.swing.JTable();
        btnModifyRecords = new javax.swing.JButton();
        btnSearchResults = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        mbMenu = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miHelp = new javax.swing.JMenuItem();
        miModifyRecords = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cmbSearchCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Animals", "Species" }));
        cmbSearchCategory.setToolTipText("What you're searching for.");
        cmbSearchCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSearchCategoryItemStateChanged(evt);
            }
        });

        txfSearch.setToolTipText("What is being searched for in the database, according to the search category.");

        lblSearchFor.setText("Search for:");

        tblSearchResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Species", "Animal", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchResults.setToolTipText("");
        scpTableScroll.setViewportView(tblSearchResults);

        btnModifyRecords.setText("Modify Records");
        btnModifyRecords.setToolTipText("If you're an admin, you can modify the database by clicking on this button.");
        btnModifyRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyRecordsActionPerformed(evt);
            }
        });

        btnSearchResults.setText("No results found");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        mFile.setText("File");

        miHelp.setText("Help");
        miHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHelpActionPerformed(evt);
            }
        });
        mFile.add(miHelp);

        miModifyRecords.setText("Modify Records");
        miModifyRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miModifyRecordsActionPerformed(evt);
            }
        });
        mFile.add(miModifyRecords);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mFile.add(miExit);

        mbMenu.add(mFile);

        setJMenuBar(mbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch))
                    .addComponent(scpTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnModifyRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSearchResults)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblSearchFor)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(lblSearchFor)
                    .addComponent(cmbSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSearchResults)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnModifyRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(scpTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    /**
     * Opens the Database Modification GUI.
     * <p>
     * Administrator permissions required.
     * <p>
     * Prompts the user to enter administrator credentials.
     * <p>
     * If valid credentials are entered, the user is presented with a GUI that
     * allows the insertion or deletion of records within the database.
     * <p>
     * If no valid credentials are entered, the user is notified that
     * administrator permissions are required for database modification.
     * 
     * @param evt The event fired from this button being pressed.
     */
    private void btnModifyRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyRecordsActionPerformed
        
        try {
            
            /* Prompt for administrator credentials */
            if (isAdminCredentialsVerified()) {

                /* If valid administrator credentials are provided, present the user
                 * with the administrator GUI
                 */
                ZRCAdmin zrcAdmin = new ZRCAdmin();

                /* Enable the administrator GUI to connect to the database with the
                 * same IP address and port number as the regular client
                 */
                zrcAdmin.setNetConfig(serverIP, port);

                /* Finally enable administrative database interaction */
                zrcAdmin.setVisible(true);

            }
            
        } catch (Exception e) {
            
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            
        }
        
    }//GEN-LAST:event_btnModifyRecordsActionPerformed
    
    
    
    /**
     * 
     * @param evt The event fired from this button being pressed.
     */
    private void cmbSearchCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSearchCategoryItemStateChanged
        
        /* Store the new search category */
        if (cmbSearchCategory.getSelectedIndex() == 0) {
            
            searchCategory = ServerInteractions.SearchCategory.ANIMALS;
            
        } else {
            
            searchCategory = ServerInteractions.SearchCategory.SPECIES;
            
        }
        
    }//GEN-LAST:event_cmbSearchCategoryItemStateChanged
    
    
    
    /**
     * Requests the Server to search for and return the results from the user's
     * search input, based on their chosen category.
     * <p>
     * If the category is "Animals" then the Server will search for and return
     * complete and partial matches between the search input and existing
     * animal names in the database.
     * <p>
     * If the category is "Species" then the Server will search for and return
     * complete and partial matches between the search input and existing
     * species names in the database.
     * 
     * @param evt The event fired from this button being pressed.
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        /* Store the given search text (The search category is already known) */
        String searchText = txfSearch.getText();
        
        /* Pack the packet to send to the server */
        /**
         * SEARCH:
         * packet(0) = interaction type (SEARCH)
         * packet(1) = searchCategory (ANIMALS, SPECIES)
         * packet(2) = searchText
         */
        if (!packetToServer.isEmpty()) {
            packetToServer.clear();
        }
        packetToServer.add(ServerInteractions.Interactions.REGULAR_SEARCH);
        packetToServer.add(searchCategory);
        packetToServer.add(searchText);
        
        try {
            
            /* Request the server to search the database for the given search text */
            packetFromServer = ServerInteractions.getServerResponse(serverIP, port, packetToServer);
            
            if (packetFromServer.get(0).equals("Error")) {
                
                JOptionPane.showMessageDialog(this, "A server-side error occurred.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
                
            }
            
            /* Unpack the packet to get the ResultSet */
            ResultSet resultSet = (ResultSet)packetFromServer.get(1);
            System.out.println("Successfully parsed packetFromServer");
            
            /* Fill the ResultSet into the results table */
            DefaultTableModel populatedTable = new DefaultTableModel();

            try {

                /* Get the number of columns in the table */
                ResultSetMetaData metaData = resultSet.getMetaData();
                int columnCount = metaData.getColumnCount();

                /* Add the columns to the updated table model */
                for (int i = 1; i <= columnCount; i++){
                    populatedTable.addColumn(metaData.getColumnLabel(i));
                }

                /* Populate the updated table */
                String[] rows = new String[columnCount];
                while (resultSet.next()) {

                    for (int i = 0; i < columnCount; i++){
                        rows[i] = resultSet.getString(i+1);
                    }

                    populatedTable.addRow(rows);

                }

                tblSearchResults.setModel(populatedTable);

            } catch (SQLException sqle) {

                JOptionPane.showMessageDialog(this, "Unable to update table. Possibly invalid ResultSet.", "Error", JOptionPane.ERROR_MESSAGE);

            }
            
        } catch (ServerCommunicationException e) {
            
            JOptionPane.showMessageDialog(this, "Exception occurred getting server's response", "Error", JOptionPane.ERROR_MESSAGE);
            
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed
    
    
    
    /**
     * Custom close operation: exits the program by calling exit().
     * <p>
     * Prompts the user to select an option between "Exit", "Minimise", and
     * "Cancel", and executes the user's selected instruction.
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        /* exit() is also called when the exit button is clicked */
        exit();
        
    }//GEN-LAST:event_formWindowClosing
    
    
    
    /**
     * Designs and displays the help menu.
     * 
     * @param evt 
     */
    private void miHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHelpActionPerformed
        
        /* Design the help dialog */
        JPanel regularUser = new JPanel();
        JTextArea regUserHelp = new JTextArea();
        
        regUserHelp.setText(
                "You can type in \"Search Bar\" (located at the top "
              + "left) to enter what you wish to search for. Use the "
              + "\"Search Category\" drop-down menu (located at the "
              + "top right) to select whether you are searching for "
              + "animal names, or species names. When Ready, press "
              + "the \"Search\" button between the \"Search Bar\" and "
              + "the \"Search Category\" menu to search the database "
              + "for everything that matches the text you typed based "
              + "on the search category you selected."
              + "\n\n"
              + "If nothing matches what you searched for, a message "
              + "to the right of the \"Search Results\" table "
              + "(located from the bottom left almost to the top "
              + "right) will indicate that to you."
              + "\n\n"
              + "If you leave the \"Search Bar\" blank when you click "
              + "on the \"Search\" button, All animals will be shown "
              + "in the \"Search Results\" table."
              + "\n\n"
              + "If you wish to modify the database records, you need "
              + "administrator credentials. Clicking on the \"Modify "
              + "Records\" button will prompt for an administrator "
              + "username and password, and bring you to the database "
              + "modification menu, provided you enter valid "
              + "credentials."
              + "\n\n"
              + "When Exiting or closing the application, you will be "
              + "prompted to either exit, minimise, or cancel the "
              + "operation.");
        
        regUserHelp.setLineWrap(true);
        regUserHelp.setSize(400, 300);
        regUserHelp.setWrapStyleWord(true);
        
        
        regularUser.add(regUserHelp);
        
        /* Show the help dialog */
        JOptionPane.showMessageDialog(this, regularUser, "Help", JOptionPane.PLAIN_MESSAGE);
        
    }//GEN-LAST:event_miHelpActionPerformed
    
    
    
    /**
     * Custom close operation: exits the program by calling exit().
     * <p>
     * Prompts the user to select an option between "Exit", "Minimise", and
     * "Cancel", and executes the user's selected instruction.
     */
    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        
        /* exit() is also called when the user clicks on the "Close" WindowCOmponent */
        exit();
        
    }//GEN-LAST:event_miExitActionPerformed
    
    
    
    /**
     * Calls btnModifyRecord's event handler since their events are identical in handling.
     * 
     * @param evt 
     */
    private void miModifyRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miModifyRecordsActionPerformed
        
        /* Call btnModifyRecord's event handler since their events are identical in handling. */
        btnModifyRecords.doClick();
        
    }//GEN-LAST:event_miModifyRecordsActionPerformed
    
    
    
    /**
     * Prompts the user to enter an administrator username and password, and
     * checks with the database through the server whether or not the
     * credentials are valid.
     * <p>
     * If the credentials are valid, administrator privileges are granted for
     * the action that requires them (The action that called this event).
     * 
     * @return Whether or not valid administrator credentials have been entered
     * by the user.
     * @throws Exception when there is an error in communication with the server.
     */
    private boolean isAdminCredentialsVerified() throws Exception {
        
        /* Design the popup dialog's message */
        JLabel lblUsername = new JLabel("Username");
        JTextField txfUsername = new JTextField();
        JLabel lblPassword = new JLabel("Password");
        JPasswordField txfPassword = new JPasswordField();
        JLabel lblIncorrect = new JLabel("");
        lblIncorrect.setForeground(Color.red);
        String username;
        String password;
        
        /* Assemble the dialog popup's message */
        Object[] message = {
            "Please enter your administrator credentials.",
            lblUsername, txfUsername,
            lblPassword, txfPassword,
            lblIncorrect
        };
        
        
        /* Display the prompt to request administrator credentials */
        int response;
        response = JOptionPane.showConfirmDialog(
                    null,
                    message,
                    "Administrator Permissions Required",
                    JOptionPane.OK_CANCEL_OPTION);
        
        /* Notify the user of their invalid credentials in the next appearance
         * of the ConfirmDialog's popup
         */
        lblIncorrect.setText("Invalid Username or Password.");
        
        try {
            
            /* 
             * The user input is only verified if they click "OK" and not "Cancel".
             * If the user cancels the operation, they will not be granted
             * administrator permissions.
             */
            while (response == JOptionPane.OK_OPTION) {

                username = txfUsername.getText();
                password = txfPassword.getText();

                /* Verify via the server that the input credentials match a record
                 * in the database
                 */
                if (isCredentialsValid(username, password)) {

                    return true;

                } else {

                    /* Allow the user to try again */
                    response = JOptionPane.showConfirmDialog(
                                null, message, "Administrator Permissions Required",
                                JOptionPane.OK_CANCEL_OPTION);

                }
                    
            }
            
            return false;
                
        } catch (Exception e) {

            throw new Exception(e.getMessage());

        }
        
    }
    
    
    
    /**
     * Send the input username and password to the server so it can verify with
     * the database whether or not the credentials are valid, and thus, whether
     * or not administrator permissions will be given.
     * 
     * @param username The username input by the user.
     * @param password The password input by the user.
     * @return Whether or not the input credentials match a record in the database.
     * @throws Exception when an error in communication occurs with the server.
     */
    private boolean isCredentialsValid(String username, String password) throws Exception {
        
        /* Prepare the data to send to the server (Interaction type, table,
         * fields, credentials)
         */
        /**
         * LOGIN:
         * packet(0) = interaction type (LOGIN)
         * packet(1) = username
         * packet(2) = password
         */
        if (!packetToServer.isEmpty()) {
            packetToServer.clear();
        }
        packetToServer.add(ServerInteractions.Interactions.LOGIN);
        packetToServer.add(username);
        packetToServer.add(password);
        
        
        try {
            
            /* Send the compiled packet to the server and accept its responding
             * packet
             */
            packetFromServer = ServerInteractions.getServerResponse(serverIP, port, packetToServer);
            System.out.println("got server response");
            
            try {
                
                /* Unpack the received packet to determine whether or not the
                 * credentials are valid
                 */
                serverResults = (String)packetFromServer.get(0);
 
                if (serverResults.equals("Error")) {
 
                    throw new Exception((String)packetFromServer.get(1));
 
                }
                
            } catch (Exception e) {
                
                throw new Exception(SERVER_ERROR);
                
            }
            
            boolean isCredentialsValid = serverResults.equals("Credentials Valid");
            
            /* Finally return whether or not the Server approved this client's given
             * credentials
             */
            return isCredentialsValid;
            
        } catch (ServerCommunicationException e) {
            
            throw new Exception(SERVER_COMMUNICATION_ERROR);
            
        }
        
    }
    
    
    
    /**
     * Exits the program.
     * <p>
     * Prompts the user to select an option between "Exit", "Minimise", and
     * "Cancel", and executes the user's selected instruction.
     */
    private void exit() {
        
        /* Prompt this user to select their desired closing option (Exit,
         * Minimise, or Cancel)
         */
        String[] options = {"Exit", "Minimise", "Cancel"};
        int response = JOptionPane.showOptionDialog(
                this, "Please select which operation you wish to perform.",
                "Confirm Closing", 0, JOptionPane.QUESTION_MESSAGE,
                null, options, options[2]);
        
        /* React according to the user's response */
        switch (response) {
            
            case 0: 
                
                /* Exit the program */
                System.exit(0);
                
                /* Do not follow through to the following cases */
                break;
                
            case 1: 
                
                /* Minimise the program */
                setState(Frame.ICONIFIED);
                
                /* Do not follow through to the following cases */
                break;
                
            case 2:
                
                /* Follow through to default (cancel the close operation) */
                
            default:
                
                /* Cancel the close operation (return) */
                /* Commented out: return as the last line is redundant */
//                return
        }
        
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZooRegisterClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ZooRegisterClient().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnModifyRecords;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel btnSearchResults;
    private javax.swing.JComboBox cmbSearchCategory;
    private javax.swing.JLabel lblSearchFor;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenuBar mbMenu;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miHelp;
    private javax.swing.JMenuItem miModifyRecords;
    private javax.swing.JScrollPane scpTableScroll;
    private javax.swing.JTable tblSearchResults;
    private javax.swing.JTextField txfSearch;
    // End of variables declaration//GEN-END:variables
}
